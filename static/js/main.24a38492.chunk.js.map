{"version":3,"sources":["NewMemeForm.js","Meme.js","App.js","rootReducer.js","serviceWorker.js","index.js"],"names":["DEFAULT_FORM","url","topText","bottomText","NewMemeForm","addMeme","useState","form","setForm","handleChange","e","target","name","value","f","onSubmit","preventDefault","id","uuidv4","htmlFor","type","onChange","Meme","deleteMeme","className","src","alt","onClick","App","memes","useSelector","st","console","log","dispatch","useDispatch","memeComps","map","m","key","newMeme","meme","DEFAULT_STATE","rootReducer","state","action","filter","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAIMA,EAAe,CACnBC,IAAK,sGACLC,QAAS,OACTC,WAAY,SAqDCC,MAlDf,YAAmC,IAAZC,EAAW,EAAXA,QAAW,EACRC,mBAASN,GADD,mBACzBO,EADyB,KACnBC,EADmB,KAShC,SAASC,EAAaC,GAAI,IAAD,EACCA,EAAEC,OAAlBC,EADe,EACfA,KAAMC,EADS,EACTA,MACdL,GAAQ,SAAAM,GAAC,kCAAUA,GAAV,kBAAcF,EAAOC,OAGhC,OACE,6BACE,+CACA,0BAAME,SAdV,SAAsBL,GACpBA,EAAEM,iBACFX,EAAQ,2BAAKE,GAAN,IAAYU,GAAIC,SACvBV,EAAQR,KAYJ,2BAAOmB,QAAQ,OAAf,aACA,2BACEC,KAAK,OACLR,KAAK,MACLK,GAAG,WACHI,SAAUZ,EACVI,MAAON,EAAKN,MAEd,2BAAOkB,QAAQ,WAAf,YACA,2BACEC,KAAK,OACLR,KAAK,UACLK,GAAG,eACHI,SAAUZ,EACVI,MAAON,EAAKL,UAEd,2BAAOiB,QAAQ,cAAf,eACA,2BACEC,KAAK,OACLR,KAAK,aACLK,GAAG,kBACHI,SAAUZ,EACVI,MAAON,EAAKJ,aAEd,4BAAQiB,KAAK,SAASH,GAAG,eAAzB,qB,MCvBOK,MAzBf,YAA6D,IAA7CC,EAA4C,EAA5CA,WAAYrB,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,WAAYF,EAAW,EAAXA,IAAKgB,EAAM,EAANA,GAKpD,OACE,yBAAKA,GAAG,MAAMO,UAAU,QACtB,yBAAKA,UAAU,aACb,0BAAMA,UAAU,YAAYtB,GAC5B,yBAAKuB,IAAKxB,EAAKyB,IAAI,WACnB,0BAAMF,UAAU,eAAerB,GAC/B,4BAAQc,GAAG,iBAAiBU,QAVlC,WACEJ,EAAWN,KASP,a,eCwBOW,MAjCf,WACE,IAAMC,EAAQC,aAAY,SAAAC,GAAE,OAAIA,EAAGF,SACnCG,QAAQC,IAAI,iBACZD,QAAQC,IAAIJ,GACZ,IAAMK,EAAWC,cAUXC,EAAYP,EAAMQ,KAAI,SAAAC,GAAC,OAC3B,kBAAC,EAAD,CACEC,IAAKD,EAAErB,GACPf,QAASoC,EAAEpC,QACXC,WAAYmC,EAAEnC,WACdF,IAAKqC,EAAErC,IACPsB,WAAY,kBAVIN,EAUaqB,EAAErB,QATjCiB,EAAS,CAAEd,KAAM,cAAeH,OADlC,IAAoBA,QAcpB,OACE,yBAAKO,UAAU,OACb,kBAAC,EAAD,CAAanB,QApBjB,SAAiBmC,GACfN,EAAS,CAAEd,KAAM,WAAYqB,KAAMD,OAoBjC,6BACCJ,I,eClCDM,EAAgB,CACpBb,MAAO,IAsBMc,MAnBf,WAAqD,IAAhCC,EAA+B,uDAAvBF,EAAeG,EAAQ,uCAClD,MAAoB,aAAhBA,EAAOzB,KACF,2BACFwB,GADL,IAEEf,MAAM,GAAD,mBACAe,EAAMf,OADN,gBACkBgB,EAAOJ,UAId,gBAAhBI,EAAOzB,KACF,2BACFwB,GADL,IAEEf,MAAOe,EAAMf,MAAMiB,QAAO,SAAAL,GAAI,OAAIA,EAAKxB,KAAO4B,EAAO5B,QAIlD2B,GCRWG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAYV,GAE1BW,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.24a38492.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport uuidv4 from \"uuid/v4\";\nimport \"./NewMemeForm\";\n\nconst DEFAULT_FORM = {\n  url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTiQv7LRl7QTU8UJP1TegabvLqZlnTvmge8fA&usqp=CAU\",\n  topText: \"Dave\",\n  bottomText: \"Grohl\"\n};\n\nfunction NewMemeForm({ addMeme }) {\n  const [form, setForm] = useState(DEFAULT_FORM);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    addMeme({ ...form, id: uuidv4() });\n    setForm(DEFAULT_FORM);\n  }\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setForm(f => ({ ...f, [name]: value }));\n  }\n\n  return (\n    <div>\n      <h2>Make a New Meme</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"url\">Image URL</label>\n        <input\n          type=\"text\"\n          name=\"url\"\n          id=\"form_url\"\n          onChange={handleChange}\n          value={form.url}\n        />\n        <label htmlFor=\"topText\">Top Text</label>\n        <input\n          type=\"text\"\n          name=\"topText\"\n          id=\"form_topText\"\n          onChange={handleChange}\n          value={form.topText}\n        />\n        <label htmlFor=\"bottomText\">Bottom Text</label>\n        <input\n          type=\"text\"\n          name=\"bottomText\"\n          id=\"form_bottomText\"\n          onChange={handleChange}\n          value={form.bottomText}\n        />\n        <button type=\"submit\" id=\"form_submit\">\n          Generate Meme!\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default NewMemeForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Meme.css\";\n\nfunction Meme({ deleteMeme, topText, bottomText, url, id }) {\n  function handleDeleteMeme() {\n    deleteMeme(id);\n  }\n\n  return (\n    <div id=\"foo\" className=\"Meme\">\n      <div className=\"container\">\n        <span className=\"top-text\">{topText}</span>\n        <img src={url} alt=\"a meme\" />\n        <span className=\"bottom-text\">{bottomText}</span>\n        <button id=\"meme_deleteBtn\" onClick={handleDeleteMeme}>\n          DELETE\n        </button>\n      </div>\n    </div>\n  );\n}\n\nMeme.propTypes = {\n  topText: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  bottomText: PropTypes.string.isRequired\n};\n\nexport default Meme;\n","import React from \"react\";\nimport NewMemeForm from \"./NewMemeForm\";\nimport Meme from \"./Meme\";\nimport \"./App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction App() {\n  const memes = useSelector(st => st.memes);\n  console.log('this is state')\n  console.log(memes)\n  const dispatch = useDispatch();\n\n  function addMeme(newMeme) {\n    dispatch({ type: \"ADD_MEME\", meme: newMeme });\n  }\n\n  function deleteMeme(id) {\n    dispatch({ type: \"REMOVE_MEME\", id });\n  }\n\n  const memeComps = memes.map(m => (\n    <Meme\n      key={m.id}\n      topText={m.topText}\n      bottomText={m.bottomText}\n      url={m.url}\n      deleteMeme={() => deleteMeme(m.id)}\n    />\n  ));\n\n  return (\n    <div className=\"App\">\n      <NewMemeForm addMeme={addMeme} />\n      <hr />\n      {memeComps}\n    </div>\n  );\n}\n\nexport default App;\n","const DEFAULT_STATE = {\n  memes: []\n};\n\nfunction rootReducer(state = DEFAULT_STATE, action) {\n  if (action.type === \"ADD_MEME\") {\n    return {\n      ...state,\n      memes: [\n        ...state.memes, { ...action.meme }\n      ]\n    };\n  }\n  if (action.type === \"REMOVE_MEME\") {\n    return {\n      ...state,\n      memes: state.memes.filter(meme => meme.id !== action.id)\n    };\n  }\n\n  return state;\n}\n\nexport default rootReducer;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from \"redux\"\nimport {Provider} from \"react-redux\"\nimport rootReducer from \"./rootReducer\"\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}